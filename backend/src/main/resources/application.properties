server.port=8080


# DataSource settings: set here your own configurations for the database 
# connection. In this case we have "weatherapp_db" as database name, "root" and 
# "weatherapp_db_user" as usernames and "weatherAppDB_pwd" as password for both.
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://18.194.88.23:3306/weatherapp_db?autoReconnect=true&useSSL=false
spring.datasource.username=weatherapp_db_user
spring.datasource.password=weatherAppDB_pwd

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.properties.hibernate.dialect.storage_engine = innodb
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
        
# App configuration
weatherapp.token.header=X-Auth-Token
weatherapp.token.secret=MaYzkSjmkzPC57L
# Token will be valid for a day
weatherapp.token.expiration=86400

# Routes
weatherapp.route.authentication=auth
weatherapp.route.authentication.refresh=refresh
weatherapp.route.protected=protected